# -*- coding: utf-8 -*-
"""telecom X projeto Alura Ciência de dados

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G1Or3pENH9KbjkefDnOzoCQPoh3HlrSR

Import das bibliotecas necessarias para o projeto
"""

import numba as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

url = 'https://raw.githubusercontent.com/alura-cursos/challenge2-data-science/refs/heads/main/TelecomX_Data.json'

"""Toda limpeza do Json, e contatenagem das colunas e abertura dos dicionarios com normalize.

"""

df = pd.read_json(url)

cliente_normal = pd.json_normalize(df['customer'])
fone_normal = pd.json_normalize(df['phone'])
internet_normal= pd.json_normalize(df['internet'])
conta_normal=pd.json_normalize(df['account'])

df_final =  pd.concat([
    df[['customerID', 'Churn']],
    cliente_normal,
    fone_normal,
    internet_normal,
    conta_normal

], axis=1)
df_final.replace("None", pd.NA, inplace=True)
df_final.replace("NaN", pd.NA, inplace=True)
df_final.replace("", pd.NA, inplace=True)
df_final= df_final[df_final['Churn'].notna()]

"""Com este grafico identificamos um total de 1869 cancelamentos. E ainda temos 5174 clientes na base."""

churn_counta = df_final['Churn'].value_counts()
ax = sns.barplot( x=churn_counta.index, y=churn_counta.values)
plt.title('Clientes ainda na base x Cancelamento ')
plt.xlabel('Churn')
plt.ylabel('Total de Clientes')

for i in range(len(churn_counta)):
  ax.text(i,churn_counta.values[i]+20,
          str(churn_counta.values[i]),
          ha='center',
          fontsize=12,
          color='black')

"""Começamos a analise dos clientes que ja cancelaram para avalisar melhor em busca de novos insigths"""

df_cancelado =  df_final[df_final['Churn'] == 'Yes']

df_tempo_de_uso_c = df_cancelado['tenure']
df_tempo_de_uso = df_final['tenure']


print("Média (cancelados):", df_tempo_de_uso_c.mean())
print("Média (geral):", df_tempo_de_uso.mean())

print("Mediana (cancelados):", df_tempo_de_uso_c.median())
print("Mediana (geral):", df_tempo_de_uso.median())

"""# **Analisando porém a relação entre dependentes e churn, constatamos que os clientes sem dependentes tem uma media de 20% a mais de cancelamento que os com dependentes.**




"""

pd.crosstab(df_final['Dependents'], df_final['Churn'])

"""A taxa de cancelamento entre clientes com serviço telefônico (26.7%) é ligeiramente maior que a dos clientes sem o serviço (24.9%).


No entanto, a diferença é pequena — menos de 2 pontos percentuais.
O serviço telefônico não parece ser um fator determinante para churn, ao contrário de outros fatores

"""

pd.crosstab(df_final['PhoneService'], df_final['Churn'])

"""Com o codigo, vamos analisar quantas pessoas com DSL cancelaram e quantas com Fibra Otica cancelaram, a vim de verificarmos se temos relação com a velocidade e serviço prestado.  
Insigth:
**Clientes com fibra tem uma taxa de 30% a mais de cancelamento quanto aos de DSL.**

"""

internet_churn = pd.crosstab(df_final['InternetService'], df_final['Churn'])
print(internet_churn)

"""A baixo podemos identificar que os clientes com maior valor de conta tendem a cancelar mais."""

df_final['Charges.Monthly'] = pd.to_numeric(df_final['Charges.Monthly'], errors='coerce')

df_churn_summary = df_final.groupby('Churn').agg({
    'tenure': 'mean',
    'Charges.Monthly': 'mean',

})
print(df_churn_summary)

"""Nos 2 codigos a baixo podemos analisar que o contrato Month-to-month e disparado o com maior taxa de cancelamento.  """

df_final['Contract'].value_counts()

df_cancelado['Contract'].value_counts()

"""Agora vamos analisar se o valor dos planos tem diferença"""

media_contrato = df_final[df_final['Contract'] == 'Month-to-month']

contratos = media_contrato.groupby('Contract').agg({
    'Charges.Monthly' : 'mean'
}
)
print(contratos)

media_one_year = df_final[df_final['Contract'] == 'One year' ]

contrato_ano = media_one_year.groupby('Contract').agg({
        'Charges.Monthly' : 'mean'
})

print(contrato_ano)

media_two_year = df_final[df_final['Contract'] == 'Two year' ]

contrato_two = media_two_year.groupby('Contract').agg({
    'Charges.Monthly' : 'mean'
})
print(contrato_two)

"""**Como podemos ver acima a media de valor mensal no contrato de 2 anos é menor, o que pode ser um dos motivos do churn em contratos com menor tempo! **

Agora vamos verificar os valores pagos por clientes DSL X Fibra
Podemos analisar uma diferença de quase 40% nos valores em acressimo para a fibra.
"""

valor_planos_dsl = df_final[df_final['InternetService'] == 'DSL']
valor_planos_fibra = df_final[df_final['InternetService'] == 'Fiber optic']


media_adsl = valor_planos_dsl['Charges.Monthly'].median()
media_fibra = valor_planos_fibra['Charges.Monthly'].median()


print(f'O valor medio dos planos ADSL são {media_adsl}')
print(f'O valor medio dos planos Fibra são {media_fibra}')

"""Agora vamos verificar a relação entre os tipos de internet e o suporte tecnico

De acordo com analises, a manutenção por tipo de internet não gera impacto significativo para o Churn, porém vale ressaltar a media de internets em FIBRA gera 60% a menos manutenção que a DSL.


"""

suporte_fibra = df_cancelado[df_cancelado['TechSupport']=='No']

suporte_fibra['InternetService'].value_counts()

"""Agora vamos verificar a coluna de genero.

Podemos analisar que não existe relação entre o genero e o cancelamento, ja que nem um grupo se destaca.
"""

df_cancelado['gender'].value_counts()

"""Vamos analizar a idade."""

total_idosos = df_final['SeniorCitizen'].sum()
total_idosos_c = df_cancelado['SeniorCitizen'].sum()

categoria = ['Idosos', 'Total de idosos que cancelaram']
valores= [total_idosos,total_idosos_c]

plt.bar(categoria,valores, color=['#4CAF50', '#F44336'])
for i, v in enumerate(valores):
    plt.text(i, v + 10, str(v), ha='center', fontweight='bold')

plt.title('Comparação: Idosos vs Idosos que Cancelaram')
plt.ylabel('Quantidade de Clientes')
plt.xlabel('Grupo')

"""Agora vamos analisar os metodos de pagamentos , afim de ver se temos relações entre cancelamento e pagamento.

Podemos identificar que o tipo de pagamento também influencia na tomada de decisões para o cancelamento.
"""

df_final['PaymentMethod'].value_counts()

df_cancelado['PaymentMethod'].value_counts()

df_final['PaperlessBilling'].value_counts()

df_cancelado['PaperlessBilling'].value_counts()

"""Verificamos variações significativas entre Phone Services."""

df_final['PhoneService'].value_counts()

df_cancelado['PhoneService'].value_counts()

"""Podemos encontrar variações também no modo streaming tv.  Talvez o valor acima do plano faça com que a desistencia aconteça."""

df_final['StreamingTV'].value_counts()

df_cancelado['StreamingTV'].value_counts()

df_final['StreamingMovies'].value_counts()

df_cancelado['StreamingMovies'].value_counts()

df_count_tenure = df_cancelado['tenure'].value_counts().sort_index().cumsum()
total_clientes = len(df_final)
percentual_acumulado = (df_count_tenure / total_clientes)

percentual_acumulado.plot()
plt.title("Percentual acumulado de cancelamentos por tempo de serviço (tenure)")
plt.xlabel("Meses de serviço")
plt.ylabel("Percentual acumulado de cancelamentos (%)")
plt.grid(True)
plt.show()

df_idosos = df_cancelado[ df_cancelado['SeniorCitizen'] == 1]


ax = df_idosos['InternetService'].value_counts().plot(kind='barh')




ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.tick_params(left=False, bottom=False)
ax.set_title('Cancelamentos 3 idade.')

ax = df_cancelado['Contract'].value_counts().plot(kind='barh')

valores = df_cancelado['Contract'].value_counts()

for i, v in enumerate(valores):
    ax.text(v + 10, i, str(v), va='center', fontweight='bold')


ax.spines['top'].set_visible(False)
ax.spines ['right'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.tick_params(left=False,bottom=False)
ax.set_title('Cancelamento por contrato')

df_contrato_c = df_cancelado[df_cancelado['Contract'] == 'Month-to-month']


df_contrato_c['tenure'].mean()

df_uso_fatura = df_cancelado.groupby('tenure')['Charges.Monthly'].mean().reset_index()

plt.figure(figsize=(12,6))
ax = sns.lineplot(x='tenure', y='Charges.Monthly', data=df_uso_fatura, marker='o', linewidth=2)


for i, row in df_uso_fatura.iterrows():
    ax.text(row['tenure'], row['Charges.Monthly'] + 0.5, f"{row['Charges.Monthly']:.2f}",
            ha='center', va='bottom', fontsize=8)

ax.set_title('Média de Valor mensal por tempo de contrato')
ax.set_xlabel('Tempo de contrato (meses)')
ax.set_ylabel('Média Valor mensal')
ax.grid(True)

plt.show()

df_uso_fatura = df_cancelado.groupby('tenure')['Charges.Monthly'].mean().reset_index()


df_uso_fatura

"""Parte feita com ajuda de IA para cluster melhor formatado.

"""

df_cluster = df_final.copy()

df_cluster.drop(['customerID', 'Churn', 'gender', 'SeniorCitizen', 'Partner',
       'Dependents', 'PhoneService', 'MultipleLines',
       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
       'TechSupport', 'StreamingTV', 'StreamingMovies',
        'Charges.Total'],axis=1,inplace=True)
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

df_cluster_encoded = pd.get_dummies(df_cluster[['tenure', 'InternetService',  'Contract', 'PaperlessBilling', 'PaymentMethod', 'Charges.Monthly']])


scaler = StandardScaler()
dados_normalizados = scaler.fit_transform(df_cluster_encoded)
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(dados_normalizados)
df_cluster['cluster'] = kmeans.labels_

df_cluster

df_vis = df_cluster.copy()
df_vis['tenure'] = df_final['tenure']
df_vis['Charges.Monthly'] = df_final['Charges.Monthly']


plt.figure(figsize=(10, 6))
sns.scatterplot(data=df_vis, x='tenure', y='Charges.Monthly', hue='cluster', palette='viridis')

plt.title('Cluster de Clientes por Tempo de Contrato e Valor Mensal')
plt.xlabel('Meses de Contrato (tenure)')
plt.ylabel('Valor Mensal (Charges.Monthly)')
plt.legend(title='Cluster')
plt.grid(True)
plt.show()

sns.countplot(data=df_cluster, x='cluster', palette='viridis')
plt.title('Número de Clientes por Cluster')
plt.xlabel('Cluster')
plt.ylabel('Quantidade de Clientes')
plt.show()

media =  df_cluster.groupby('cluster')[['tenure', 'Charges.Monthly']].mean()


ax = media.plot(kind = 'barh')
plt.title('Media de tempo de contrato, e valor de contrato por cluster.')
plt.xlabel('Valor medio')
plt.ylabel('Cluster')
ax.spines ['right'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['bottom'].set_visible(False)

for i in range(media.shape[0]):
  for j in range(media.shape[1]):
    valor = round(media.iloc[i,j],2)
    ax.text(valor + 0.5, i + (j * 0.25) - 0.25, str(valor), color='black', fontweight='bold')

plt.tight_layout()
plt.show()

df_cancelado_cluster = df_cancelado.copy()
df_cancelado_cluster['cluster'] = df_cluster['cluster']

cancelado_clustes = df_cancelado_cluster[df_cancelado_cluster['Churn'] == 'Yes'].groupby('cluster').size()


ax = cancelado_clustes.plot(kind='barh')

for i,v in enumerate(cancelado_clustes):
  ax.text(v+10,i ,str(v), va='center',fontweight='bold')


ax.spines['top'].set_visible(False)
ax.spines ['right'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.tick_params(left=False,bottom=False)

perfil_cluster2 = df_cluster[df_cluster['cluster'] == 2]

medias = perfil_cluster2[['tenure', 'Charges.Monthly']].mean()

medias.plot(kind='barh', color='tomato')
plt.title('Média - Cluster 2 ')
plt.xlabel('Valor médio')

#Parte feita por IA
ax = plt.gca()
for spine in ['top', 'right', 'left', 'bottom']:
    ax.spines[spine].set_visible(False)
#


for i, v in enumerate(medias):
    plt.text(v + 1, i, f"{v:.1f}", va='center', fontweight='bold')
plt.show()

"""**Parte  do codigo auxiliado por IA **"""

categorias = ['InternetService', 'Contract', 'PaperlessBilling', 'PaymentMethod']

for cat in categorias:
    plt.figure(figsize=(6, 4))
    sns.countplot(data=perfil_cluster2, x=cat, order=perfil_cluster2[cat].value_counts().index, palette='Set2')
    plt.title(f'{cat} - Distribuição no Cluster 2')
    plt.xticks(rotation=45)
    plt.xlabel('')
    plt.ylabel('Contagem')
    plt.tight_layout()
    plt.show()